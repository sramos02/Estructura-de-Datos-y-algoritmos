#include <iostream>
#include <vector>
using namespace std;

//Ejercicio 1
//P = {0 <= n <= long(datos)}
int cuantoSinMejora(int n, vector<int> datos){ //return ret
    int ret = 0;
    int i = 0;

    //I = {ret = max(u, v: 0 <= u < v < i && datos[u] <= datos[v]: #v)}
    while(i < n){
        int act = 0;
        int j = i;

        //I = {j = i && act = u: 0 <= u < j <= i && datos[u] <= datos[j]: #v && ret = max(u, v: 0 <= u < v < i && datos[u] <= datos[v]: #v)}
        while(i < n && datos[i + 1] <= datos[j] ){
            act++;
            if(ret < act) ret = act;
            i++;
        }
        act = 0;
        i++;
    }
    return ret;
}
//Q = {ret = max(u, v: 0 <= u < v < n && datos[u] <= datos[v]: #v)}

//El coste del algoritmo es O(N), todas las instrucciones son de coste lineal exceptuando los dos bucles while. Estos se recorren un total
//de N veces entre ambos. Ya que comparten la misma variable i. Siguiendo la función de cota, por esta lógica, fdc = n-i. Recorriendo un total
//de n veces antes de acabar el problema

int main(){
    int casos;
    cin >> casos;
    for(int i = 0; i < casos; i++){
        int n;
        vector<int> datos;

        cin >> n;
        for(int j = 0; j < n; j++) {
            int aux;
            cin >> aux;
            datos.push_back(aux);
        }

        cout << cuantoSinMejora(n, datos) << endl;
    }
    return 0;
}

//Ejercicio 2
